#QUERY 1 WITH DF
from pyspark.sql.functions import col, when, count, lower
from pyspark.sql import SparkSession

# Δημιουργία SparkSession
spark = SparkSession.builder \
    .appName("Query 1") \
    .config("spark.executor.memory", "4g") \
    .config("spark.executor.cores", "2") \
    .config("spark.executor.instances", "4") \
    .getOrCreate()

# Φόρτωση δεδομένων από τα δύο αρχεία CSV
crime_data_path_2010_2019 = "s3://initial-notebook-data-bucket-dblab-905418150721/CrimeData/Crime_Data_from_2010_to_2019_20241101.csv"
crime_data_path_2020_present = "s3://initial-notebook-data-bucket-dblab-905418150721/CrimeData/Crime_Data_from_2020_to_Present_20241101.csv"

crime_df_2010_2019 = spark.read.csv(crime_data_path_2010_2019, header=True, inferSchema=True)
crime_df_2020_present = spark.read.csv(crime_data_path_2020_present, header=True, inferSchema=True)

# Ένωση των δύο DataFrames
combined_crime_df = crime_df_2010_2019.union(crime_df_2020_present)

# Φιλτράρισμα εγγραφών που αναφέρονται στο Null Island
filtered_crime_df = combined_crime_df.filter((col("LAT") != 0) & (col("LON") != 0))

# Φιλτράρισμα για περιστατικά που περιέχουν τον όρο "aggravated assault"
filtered_df = combined_crime_df.filter(lower(col("Crm Cd Desc")).like("%aggravated assault%"))

# Προσθήκη στήλης για την κατηγοριοποίηση των θυμάτων σε ηλικιακές ομάδες
age_grouped_df = filtered_df.withColumn(
    "Age Group",
    when(col("Vict Age") < 18, "Children")
    .when((col("Vict Age") >= 18) & (col("Vict Age") <= 24), "Young Adults")
    .when((col("Vict Age") >= 25) & (col("Vict Age") <= 64), "Adults")
    .when(col("Vict Age") > 64, "Seniors")
)

# Ομαδοποίηση ανά ηλικιακή ομάδα και καταμέτρηση
result_df = age_grouped_df.groupBy("Age Group").agg(count("*").alias("Total Cases"))

# Ταξινόμηση σε φθίνουσα σειρά
sorted_result_df = result_df.orderBy(col("Total Cases").desc())

# Εμφάνιση αποτελεσμάτων
sorted_result_df.show()
